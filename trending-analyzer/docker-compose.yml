version: '3.8'

services:
  # 趋势分析器应用
  trending-analyzer:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: trending-analyzer
    restart: unless-stopped
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
      - redis
    environment:
      - KAFKA_BROKERS=kafka-1:9092,kafka-2:9092,kafka-3:9092
      - KAFKA_TOPIC=InteractionCollected
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - SPARK_MASTER=local[*]
    ports:
      - "8000:8000"
    volumes:
      - ./src:/app/src
      - ./checkpoint:/tmp/spark_checkpoints_trending
    networks:
      - wallpaper-network

  # 数据生成器 - 生成模拟数据发送到Kafka
  data-generator:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: data-generator
    restart: unless-stopped
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
    environment:
      - KAFKA_BROKERS=kafka-1:9092,kafka-2:9092,kafka-3:9092
      - KAFKA_TOPIC=InteractionCollected
    volumes:
      - ./tools:/app/tools
    command: python /app/tools/stubs/kafka_stub_generator.py --users 100 --wallpapers 50 --threads 2 --batch 50 --interval 1 --duration 1800
    networks:
      - wallpaper-network

  # Kafka集群（消息队列系统）
  kafka-1:
    image: apache/kafka-native
    container_name: kafka-1
    restart: always
    ports:
      - "9092:9092"
    environment:
      - KAFKA_NODE_ID=1
      - KAFKA_PROCESS_ROLES=broker,controller
      - KAFKA_LISTENERS=CONTROLLER://:9091,DOCKER://:9092
      - KAFKA_ADVERTISED_LISTENERS=DOCKER://kafka-1:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,DOCKER:PLAINTEXT
      - KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CONTROLLER_QUORUM_VOTERS=1@kafka-1:9091,2@kafka-2:9091,3@kafka-3:9091
      - KAFKA_INTER_BROKER_LISTENER_NAME=DOCKER
      - KAFKA_NUM_PARTITIONS=3
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=2
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
    volumes:
      - kafka-1-data:/var/lib/kafka/data
    networks:
      - wallpaper-network

  kafka-2:
    image: apache/kafka-native
    container_name: kafka-2
    restart: always
    ports:
      - "9093:9092"
    environment:
      - KAFKA_NODE_ID=2
      - KAFKA_PROCESS_ROLES=broker,controller
      - KAFKA_LISTENERS=CONTROLLER://:9091,DOCKER://:9092
      - KAFKA_ADVERTISED_LISTENERS=DOCKER://kafka-2:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,DOCKER:PLAINTEXT
      - KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CONTROLLER_QUORUM_VOTERS=1@kafka-1:9091,2@kafka-2:9091,3@kafka-3:9091
      - KAFKA_INTER_BROKER_LISTENER_NAME=DOCKER
      - KAFKA_NUM_PARTITIONS=3
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=2
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
    volumes:
      - kafka-2-data:/var/lib/kafka/data
    networks:
      - wallpaper-network

  kafka-3:
    image: apache/kafka-native
    container_name: kafka-3
    restart: always
    ports:
      - "9094:9092"
    environment:
      - KAFKA_NODE_ID=3
      - KAFKA_PROCESS_ROLES=broker,controller
      - KAFKA_LISTENERS=CONTROLLER://:9091,DOCKER://:9092
      - KAFKA_ADVERTISED_LISTENERS=DOCKER://kafka-3:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,DOCKER:PLAINTEXT
      - KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CONTROLLER_QUORUM_VOTERS=1@kafka-1:9091,2@kafka-2:9091,3@kafka-3:9091
      - KAFKA_INTER_BROKER_LISTENER_NAME=DOCKER
      - KAFKA_NUM_PARTITIONS=3
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=2
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
    volumes:
      - kafka-3-data:/var/lib/kafka/data
    networks:
      - wallpaper-network

  # Redis（用于存储和查询趋势数据）
  redis:
    image: redis:alpine
    container_name: redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - wallpaper-network

  # Redis管理界面（可选）
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis-commander
    restart: unless-stopped
    depends_on:
      - redis
    environment:
      - REDIS_HOSTS=redis
    ports:
      - "8081:8081"
    networks:
      - wallpaper-network

  # Kafka管理界面（可选）
  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    restart: always
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=wallpaper-kafka
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka-1:9092,kafka-2:9092,kafka-3:9092
    networks:
      - wallpaper-network

networks:
  wallpaper-network:
    driver: bridge

volumes:
  redis-data:
  kafka-1-data:
  kafka-2-data:
  kafka-3-data: 